import React, { useEffect, useState } from 'react';
import { X, Send, Database, Code, Palette, Bug, CheckCircle, AlertTriangle } from 'lucide-react';
import { WorkflowStage, Task } from '../../types';
import { apiService } from '../../services/api';

type CopyField = 'description' | 'assigneeId' | 'dueDate';

interface MirrorBackModalProps {
    /** linked-–∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—ë–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é */
    linkedTask: Task;
    /** id –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ (–∏–∑ –ª–∏–Ω–∫–∞) */
    originTaskId: string;
    /** boardId –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ */
    originBoardId: string;
    onClose: () => void;
    onDone: () => void; // –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
}

const MirrorBackModal: React.FC<MirrorBackModalProps> = ({
                                                             linkedTask,
                                                             originTaskId,
                                                             originBoardId,
                                                             onClose,
                                                             onDone,
                                                         }) => {
    const [stages, setStages] = useState<WorkflowStage[]>([]);
    const [moveToStageKey, setMoveToStageKey] = useState('');
    const [comment, setComment] = useState('');
    const [copyFields, setCopyFields] = useState<CopyField[]>([]);
    const [autoDeploy, setAutoDeploy] = useState(false);
    const [commentTemplate, setCommentTemplate] = useState<string>('custom');
    const [apiEndpoints, setApiEndpoints] = useState<string>('');
    const [dbChanges, setDbChanges] = useState<string>('');
    const [designNotes, setDesignNotes] = useState<string>('');
    const [testResults, setTestResults] = useState<'passed' | 'failed' | 'partial' | ''>('');
    const [issues, setIssues] = useState<string>('');
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [err, setErr] = useState('');

    useEffect(() => {
        (async () => {
            try {
                const ss = await apiService.getBoardStages(originBoardId);
                setStages(ss);
                if (!moveToStageKey && ss.length) setMoveToStageKey(ss[0].key);
            } catch (e: any) {
                setErr(e?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–¥–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–æ—Å–∫–∏');
            } finally {
                setLoading(false);
            }
        })();
    }, [originBoardId]);

    const toggleCopy = (f: CopyField) => {
        setCopyFields((prev) =>
            prev.includes(f) ? prev.filter((x) => x !== f) : [...prev, f]
        );
    };

    const generateStructuredComment = () => {
        if (commentTemplate === 'custom') return comment;
        
        let structuredComment = '';
        
        // Header with status
        const statusIcon = testResults === 'passed' ? '‚úÖ' : testResults === 'failed' ? '‚ùå' : testResults === 'partial' ? '‚ö†Ô∏è' : 'üìã';
        structuredComment += `${statusIcon} **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n`;
        
        // Test Results
        if (testResults) {
            const statusText = testResults === 'passed' ? '–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' : 
                             testResults === 'failed' ? '–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã' : 
                             testResults === 'partial' ? '–ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã' : '';
            structuredComment += `üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** ${statusText}\n\n`;
        }
        
        // API Changes
        if (apiEndpoints.trim()) {
            structuredComment += `üîå **API –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n`;
            apiEndpoints.split('\n').forEach(endpoint => {
                if (endpoint.trim()) {
                    structuredComment += `‚Ä¢ \`${endpoint.trim()}\`\n`;
                }
            });
            structuredComment += '\n';
        }
        
        // Database Changes
        if (dbChanges.trim()) {
            structuredComment += `üóÑÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n`;
            dbChanges.split('\n').forEach(change => {
                if (change.trim()) {
                    structuredComment += `‚Ä¢ ${change.trim()}\n`;
                }
            });
            structuredComment += '\n';
        }
        
        // Design Notes
        if (designNotes.trim()) {
            structuredComment += `üé® **–î–∏–∑–∞–π–Ω:**\n`;
            designNotes.split('\n').forEach(note => {
                if (note.trim()) {
                    structuredComment += `‚Ä¢ ${note.trim()}\n`;
                }
            });
            structuredComment += '\n';
        }
        
        // Issues
        if (issues.trim()) {
            structuredComment += `‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã/–ó–∞–º–µ—á–∞–Ω–∏—è:**\n`;
            issues.split('\n').forEach(issue => {
                if (issue.trim()) {
                    structuredComment += `‚Ä¢ ${issue.trim()}\n`;
                }
            });
            structuredComment += '\n';
        }
        
        // Custom comment
        if (comment.trim()) {
            structuredComment += `üìù **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**\n${comment}\n\n`;
        }
        
        // Footer
        structuredComment += `---\n*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${new Date().toLocaleString('ru-RU')}*`;
        
        return structuredComment;
    };

    const handleSubmit = async () => {
        try {
            setSaving(true);
            setErr('');
            const finalComment = generateStructuredComment();
            await apiService.mirrorBackTask(linkedTask.id, {
                moveToStageKey,
                comment: finalComment,
                copyFields,
                autoDeploy,
            });
            onDone();
            onClose();
        } catch (e: any) {
            setErr(e?.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ');
        } finally {
            setSaving(false);
        }
    };

    return (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-2xl shadow-2xl w-full max-w-xl">
                <div className="flex items-center justify-between p-5 border-b">
                    <h3 className="text-lg font-semibold">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–æ—Å–∫—É</h3>
                    <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
                        <X className="w-5 h-5" />
                    </button>
                </div>

                <div className="p-5 space-y-4">
                    {loading ? (
                        <div className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–¥–∏–π...</div>
                    ) : (
                        <>
                            <div>
                                <label className="block text-sm font-medium mb-1">–¶–µ–ª–µ–≤–∞—è —Å—Ç–∞–¥–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π –¥–æ—Å–∫–∏</label>
                                <select
                                    value={moveToStageKey}
                                    onChange={(e) => setMoveToStageKey(e.target.value)}
                                    className="w-full border rounded-lg px-3 py-2"
                                >
                                    {stages.map((s) => (
                                        <option key={s.id} value={s.key}>
                                            {s.name} ({s.key})
                                        </option>
                                    ))}
                                </select>
                            </div>

                            {/* Template Selection */}
                            <div>
                                <label className="block text-sm font-medium mb-1">–¢–∏–ø –æ—Ç—á–µ—Ç–∞</label>
                                <select
                                    value={commentTemplate}
                                    onChange={(e) => setCommentTemplate(e.target.value)}
                                    className="w-full border rounded-lg px-3 py-2"
                                >
                                    <option value="structured">üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç</option>
                                    <option value="custom">‚úèÔ∏è –°–≤–æ–±–æ–¥–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</option>
                                </select>
                            </div>

                            {commentTemplate === 'structured' ? (
                                <div className="space-y-4 bg-gray-50 rounded-lg p-4">
                                    {/* Test Results */}
                                    <div>
                                        <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                            <CheckCircle className="h-4 w-4 text-green-600" />
                                            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                        </label>
                                        <select
                                            value={testResults}
                                            onChange={(e) => setTestResults(e.target.value as any)}
                                            className="w-full border rounded-lg px-3 py-2"
                                        >
                                            <option value="">–ù–µ —É–∫–∞–∑–∞–Ω–æ</option>
                                            <option value="passed">‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã</option>
                                            <option value="partial">‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã</option>
                                            <option value="failed">‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã</option>
                                        </select>
                                    </div>

                                    {/* API Endpoints */}
                                    <div>
                                        <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                            <Code className="h-4 w-4 text-blue-600" />
                                            API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)
                                        </label>
                                        <textarea
                                            value={apiEndpoints}
                                            onChange={(e) => setApiEndpoints(e.target.value)}
                                            rows={3}
                                            placeholder="GET /api/users&#10;POST /api/tasks&#10;PUT /api/tasks/:id"
                                            className="w-full border rounded-lg px-3 py-2 font-mono text-sm"
                                        />
                                    </div>

                                    {/* Database Changes */}
                                    <div>
                                        <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                            <Database className="h-4 w-4 text-purple-600" />
                                            –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                                        </label>
                                        <textarea
                                            value={dbChanges}
                                            onChange={(e) => setDbChanges(e.target.value)}
                                            rows={3}
                                            placeholder="–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ users&#10;–ò–∑–º–µ–Ω–µ–Ω –∏–Ω–¥–µ–∫—Å –Ω–∞ tasks.status&#10;–ú–∏–≥—Ä–∞—Ü–∏—è 001_add_user_roles.sql"
                                            className="w-full border rounded-lg px-3 py-2"
                                        />
                                    </div>

                                    {/* Design Notes */}
                                    <div>
                                        <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                            <Palette className="h-4 w-4 text-pink-600" />
                                            –î–∏–∑–∞–π–Ω –∏ UI
                                        </label>
                                        <textarea
                                            value={designNotes}
                                            onChange={(e) => setDesignNotes(e.target.value)}
                                            rows={3}
                                            placeholder="–û–±–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫&#10;–î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏&#10;–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö"
                                            className="w-full border rounded-lg px-3 py-2"
                                        />
                                    </div>

                                    {/* Issues */}
                                    <div>
                                        <label className="block text-sm font-medium mb-2 flex items-center gap-2">
                                            <AlertTriangle className="h-4 w-4 text-orange-600" />
                                            –ü—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–º–µ—á–∞–Ω–∏—è
                                        </label>
                                        <textarea
                                            value={issues}
                                            onChange={(e) => setIssues(e.target.value)}
                                            rows={3}
                                            placeholder="–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö&#10;–ù—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î&#10;–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                                            className="w-full border rounded-lg px-3 py-2"
                                        />
                                    </div>

                                    {/* Additional Comments */}
                                    <div>
                                        <label className="block text-sm font-medium mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏</label>
                                        <textarea
                                            value={comment}
                                            onChange={(e) => setComment(e.target.value)}
                                            rows={3}
                                            placeholder="–õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏..."
                                            className="w-full border rounded-lg px-3 py-2"
                                        />
                                    </div>
                                </div>
                            ) : (
                                <div>
                                    <label className="block text-sm font-medium mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏—Ç–æ–≥–∏/–∑–∞–º–µ—Ç–∫–∏)</label>
                                    <textarea
                                        value={comment}
                                        onChange={(e) => setComment(e.target.value)}
                                        rows={6}
                                        placeholder={`–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –ü—Ä–æ–π–¥–µ–Ω–æ: ...\n- –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ...\n- API –∏–∑–º–µ–Ω–µ–Ω–∏—è: ...\n- –ë–î –∏–∑–º–µ–Ω–µ–Ω–∏—è: ...`}
                                        className="w-full border rounded-lg px-3 py-2"
                                    />
                                </div>
                            )}

                            <div>
                                <div className="text-sm font-medium mb-1">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –∏–∑ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤ –∏—Å—Ö–æ–¥–Ω—É—é</div>
                                <div className="flex gap-4 text-sm">
                                    {(['description', 'assigneeId', 'dueDate'] as CopyField[]).map((f) => (
                                        <label key={f} className="flex items-center gap-2">
                                            <input
                                                type="checkbox"
                                                checked={copyFields.includes(f)}
                                                onChange={() => toggleCopy(f)}
                                            />
                                            {f}
                                        </label>
                                    ))}
                                </div>
                            </div>

                            <label className="flex items-center gap-2 text-sm">
                                <input
                                    type="checkbox"
                                    checked={autoDeploy}
                                    onChange={(e) => setAutoDeploy(e.target.checked)}
                                />
                                –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –¥–µ–ø–ª–æ–π (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
                            </label>

                            {err && (
                                <div className="text-sm text-red-600 bg-red-50 border border-red-200 rounded p-2">{err}</div>
                            )}
                        </>
                    )}
                </div>

                <div className="p-5 border-t flex justify-end gap-2">
                    <button onClick={onClose} className="px-4 py-2 rounded-lg border">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button
                        onClick={handleSubmit}
                        disabled={loading || saving}
                        className="px-4 py-2 rounded-lg bg-blue-600 text-white disabled:bg-gray-300 flex items-center gap-2"
                    >
                        {saving ? (
                            <>
                                <span className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                                –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                            </>
                        ) : (
                            <>
                                <Send className="w-4 h-4" />
                                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                            </>
                        )}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default MirrorBackModal;